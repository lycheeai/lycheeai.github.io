{"version":3,"file":"static/js/transferName.1e672c96.chunk.js","mappings":"sMAEe,kBAAf,+B,8CAAe,aAAuCA,EAAvC,sGAAkBC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,OAAkBC,EAA/C,EAA+CA,SAAUC,EAAzD,EAAyDA,SAAzD,SACWF,EAAOG,aADlB,OACLC,EADK,YAEHF,EAFG,OAGF,aAHE,OAOF,kBAPE,QAeF,gBAfE,gDAIqBH,QAJrB,IAIqBA,OAJrB,EAIqBA,EAAWM,cAJhC,eAIGC,EAJH,OAI+CC,QAAQP,GAJvD,kBAKIM,EAASE,oBAAoBC,UAASC,EAAAA,EAAAA,GAASZ,GAAOG,IAL1D,gCAQ0BF,QAR1B,IAQ0BA,OAR1B,EAQ0BA,EAAWY,mBARrC,WAQGC,EARH,OAQyDL,QAAQP,MAC9Da,EAASf,EAAKgB,MAAM,MACfC,OAAS,GAAmC,QAA9BF,EAAOA,EAAOE,OAAS,IAV7C,uBAWO,IAAIC,MAAM,kCAXjB,iCAaIJ,EAAcJ,oBAAoB,6CAA6CJ,EAASH,EAAUgB,EAAAA,UAA+B,CAAC,UAAW,CAACJ,EAAO,OAbzJ,gCAgBwBd,QAhBxB,IAgBwBA,OAhBxB,EAgBwBA,EAAWmB,iBAhBnC,eAgBGC,EAhBH,OAgBqDZ,QAAQP,GAhB7D,kBAiBImB,EAAYX,oBAAoBY,iBAAiBhB,EAASH,GAAUS,EAAAA,EAAAA,GAASZ,GAAO,EAAG,OAjB3F,cAoBG,IAAIkB,MAAJ,4BAA+Bd,IApBlC,6C","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/transferName.js"],"sourcesContent":["import { ethers } from 'ethers';\nimport { namehash } from '../utils/normalise';\nexport default async function ({ contracts, signer }, name, { newOwner, contract, }) {\n    const address = await signer.getAddress();\n    switch (contract) {\n        case 'registry': {\n            const registry = (await contracts?.getRegistry()).connect(signer);\n            return registry.populateTransaction.setOwner(namehash(name), newOwner);\n        }\n        case 'baseRegistrar': {\n            const baseRegistrar = (await contracts?.getBaseRegistrar()).connect(signer);\n            const labels = name.split('.');\n            if (labels.length > 2 || labels[labels.length - 1] !== 'eth') {\n                throw new Error('Invalid name for baseRegistrar');\n            }\n            return baseRegistrar.populateTransaction['safeTransferFrom(address,address,uint256)'](address, newOwner, ethers.utils.solidityKeccak256(['string'], [labels[0]]));\n        }\n        case 'nameWrapper': {\n            const nameWrapper = (await contracts?.getNameWrapper()).connect(signer);\n            return nameWrapper.populateTransaction.safeTransferFrom(address, newOwner, namehash(name), 1, '0x');\n        }\n        default: {\n            throw new Error(`Unknown contract: ${contract}`);\n        }\n    }\n}\n"],"names":["name","contracts","signer","newOwner","contract","getAddress","address","getRegistry","registry","connect","populateTransaction","setOwner","namehash","getBaseRegistrar","baseRegistrar","labels","split","length","Error","ethers","getNameWrapper","nameWrapper","safeTransferFrom"],"sourceRoot":""}