{"version":3,"file":"static/js/getNames.4860dc90.chunk.js","mappings":"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","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/getNames.js","../node_modules/@ensdomains/ensjs/dist/esm/utils/format.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import { truncateFormat } from '../utils/format';\nimport { decryptName } from '../utils/labels';\nconst mapDomain = (domain) => {\n    const decrypted = decryptName(domain.name);\n    return {\n        ...domain,\n        name: decrypted,\n        truncatedName: truncateFormat(decrypted),\n        createdAt: new Date(parseInt(domain.createdAt) * 1000),\n        type: 'domain',\n    };\n};\nconst mapRegistration = (registration) => {\n    const decrypted = decryptName(registration.domain.name);\n    return {\n        expiryDate: new Date(parseInt(registration.expiryDate) * 1000),\n        registrationDate: new Date(parseInt(registration.registrationDate) * 1000),\n        ...registration.domain,\n        name: decrypted,\n        truncatedName: truncateFormat(decrypted),\n        type: 'registration',\n    };\n};\nconst getNames = async ({ gqlInstance }, { address: _address, type, page, pageSize = 10, orderDirection, orderBy, }) => {\n    const address = _address.toLowerCase();\n    const client = gqlInstance.client;\n    const domainQueryData = `\n    id\n    labelName\n    labelhash\n    name\n    isMigrated\n    parent {\n        name\n    }\n  `;\n    let queryVars = {};\n    let finalQuery = '';\n    if (type === 'all') {\n        finalQuery = gqlInstance.gql `\n      query getNames(\n        $id: ID!\n        $expiryDate: Int\n      ) {\n        account(id: $id) {\n          registrations(\n            first: 1000\n            where: { expiryDate_gt: $expiryDate }\n          ) {\n            registrationDate\n            expiryDate\n            domain {\n              ${domainQueryData}\n            }\n          }\n          domains(first: 1000) {\n            ${domainQueryData}\n            createdAt\n          }\n        }\n      }\n    `;\n        queryVars = {\n            id: address,\n            expiryDate: Math.floor(Date.now() / 1000) - 90 * 24 * 60 * 60,\n        };\n    }\n    else if (type === 'owner') {\n        if (typeof page !== 'number') {\n            finalQuery = gqlInstance.gql `\n        query getNames(\n          $id: ID! \n          $orderBy: Domain_orderBy \n          $orderDirection: OrderDirection\n        ) {\n          account(id: $id) {\n            domains(orderBy: $orderBy, orderDirection: $orderDirection) {\n              ${domainQueryData}\n              createdAt\n            }\n          }\n        }\n      `;\n            queryVars = {\n                id: address,\n                orderBy,\n                orderDirection,\n            };\n        }\n        else {\n            finalQuery = gqlInstance.gql `\n        query getNames(\n          $id: ID!\n          $first: Int\n          $skip: Int\n          $orderBy: Domain_orderBy\n          $orderDirection: OrderDirection\n        ) {\n          account(id: $id) {\n            domains(\n              first: $first\n              skip: $skip\n              orderBy: $orderBy\n              orderDirection: $orderDirection\n            ) {\n              ${domainQueryData}\n              createdAt\n            }\n          }\n        }\n      `;\n            queryVars = {\n                id: address,\n                first: pageSize,\n                skip: (page || 0) * pageSize,\n                orderBy,\n                orderDirection,\n            };\n        }\n    }\n    else {\n        if (typeof page !== 'number') {\n            finalQuery = gqlInstance.gql `\n        query getNames(\n          $id: ID!\n          $orderBy: Registration_orderBy\n          $orderDirection: OrderDirection\n          $expiryDate: Int\n        ) {\n          account(id: $id) {\n            registrations(\n              orderBy: $orderBy\n              orderDirection: $orderDirection\n              where: { expiryDate_gt: $expiryDate }\n            ) {\n              registrationDate\n              expiryDate\n              domain {\n                ${domainQueryData}\n              }\n            }\n          }\n        }\n      `;\n            queryVars = {\n                id: address,\n                orderBy,\n                orderDirection,\n                expiryDate: Math.floor(Date.now() / 1000) - 90 * 24 * 60 * 60,\n            };\n        }\n        else {\n            finalQuery = gqlInstance.gql `\n        query getNames(\n          $id: ID!\n          $first: Int\n          $skip: Int\n          $orderBy: Registration_orderBy\n          $orderDirection: OrderDirection\n          $expiryDate: Int\n        ) {\n          account(id: $id) {\n            registrations(\n              first: $first\n              skip: $skip\n              orderBy: $orderBy\n              orderDirection: $orderDirection\n              where: { expiryDate_gt: $expiryDate }\n            ) {\n              registrationDate\n              expiryDate\n              domain {\n                ${domainQueryData}\n              }\n            }\n          }\n        }\n      `;\n            queryVars = {\n                id: address,\n                first: pageSize,\n                skip: (page || 0) * pageSize,\n                orderBy: orderBy,\n                orderDirection: orderDirection,\n                expiryDate: Math.floor(Date.now() / 1000) - 90 * 24 * 60 * 60,\n            };\n        }\n    }\n    const { account } = await client.request(finalQuery, queryVars);\n    if (type === 'all') {\n        return [\n            ...account.domains.map(mapDomain),\n            ...account.registrations.map(mapRegistration),\n        ].sort((a, b) => {\n            if (orderDirection === 'desc') {\n                if (orderBy === 'labelName') {\n                    return b.name.localeCompare(a.name);\n                }\n                else {\n                    return b.createdAt.getTime() - a.createdAt.getTime();\n                }\n            }\n            else {\n                if (orderBy === 'labelName') {\n                    return a.name.localeCompare(b.name);\n                }\n                else if (orderBy === 'creationDate') {\n                    return a.createdAt.getTime() - b.createdAt.getTime();\n                }\n            }\n        });\n    }\n    else if (type === 'owner') {\n        return account.domains.map(mapDomain);\n    }\n    else {\n        return account.registrations.map(mapRegistration);\n    }\n};\nexport default getNames;\n","export const formatHashed = (name) => name.replace(/(\\[)(.{64})(\\])/g, '0x$2');\nexport const truncateFormat = (name) => name.replace(/(\\[.{3})(.{58})(.{3}\\])/g, '$1...$3');\nexport const bracketFormat = (name) => name.replace(/(0x)(.{64})(?=\\.)/g, '[$2]');\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["mapDomain","domain","decrypted","decryptName","name","truncatedName","truncateFormat","createdAt","Date","parseInt","type","mapRegistration","registration","expiryDate","registrationDate","getNames","gqlInstance","_address","address","page","pageSize","orderDirection","orderBy","toLowerCase","client","domainQueryData","queryVars","finalQuery","gql","id","Math","floor","now","first","skip","request","account","domains","map","registrations","sort","a","b","localeCompare","getTime","replace","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}