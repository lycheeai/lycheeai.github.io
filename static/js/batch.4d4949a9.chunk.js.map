{"version":3,"file":"static/js/batch.4d4949a9.chunk.js","mappings":"sJAAMA,EAAG,yCAAG,kHAASC,EAAT,EAASA,iBAAT,WAAgCC,EAAhC,iCAAgCA,EAAhC,0BACiBC,QAAQC,IAAIF,EAAMG,KAAI,WAAgBC,GAAM,IAAnBC,EAAmB,EAAnBA,KAAMP,EAAa,EAAbA,IACpD,IAAKA,EACD,MAAM,IAAIQ,MAAJ,mBAAsBF,EAAtB,sBAEV,OAAON,EAAG,WAAH,UAAOO,GACjB,KANO,cACFE,EADE,yBAODR,EAAiBD,IAAIS,IAPpB,2CAAH,sDASHC,EAAM,yCAAG,aAA6BC,GAA7B,oGAASV,EAAT,EAASA,iBAAT,WAAsCC,EAAtC,iCAAsCA,EAAtC,0BACYD,EAAiBS,OAAOC,GADpC,UACLC,EADK,iFAIJT,QAAQC,IAAIQ,EAASP,KAAI,SAACQ,EAAKP,GAAN,aAAY,EAAAJ,EAAMI,IAAGI,OAAT,SAAgBG,EAAIC,YAApB,eAAmCZ,EAAMI,GAAGC,OAAxD,MAJrB,2CAAH,wDAMZ,WACIP,IAAAA,EACAU,OAAAA,E","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/batch.js"],"sourcesContent":["const raw = async ({ multicallWrapper }, ...items) => {\n    const rawDataArr = await Promise.all(items.map(({ args, raw }, i) => {\n        if (!raw) {\n            throw new Error(`Function ${i} is not batchable`);\n        }\n        return raw(...args);\n    }));\n    return multicallWrapper.raw(rawDataArr);\n};\nconst decode = async ({ multicallWrapper }, data, ...items) => {\n    const response = await multicallWrapper.decode(data);\n    if (!response)\n        return;\n    return Promise.all(response.map((ret, i) => items[i].decode(ret.returnData, ...items[i].args)));\n};\nexport default {\n    raw,\n    decode,\n};\n"],"names":["raw","multicallWrapper","items","Promise","all","map","i","args","Error","rawDataArr","decode","data","response","ret","returnData"],"sourceRoot":""}