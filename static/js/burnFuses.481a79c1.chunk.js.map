{"version":3,"file":"static/js/burnFuses.481a79c1.chunk.js","mappings":"gNAEe,kBAAf,+B,8CAAe,aAAuCA,EAAMC,GAA7C,uGAAkBC,EAAlB,EAAkBA,UAAWC,EAA7B,EAA6BA,OAElCC,EAAgB,qBAAsBH,EACtCI,EAAkB,uBAAwBJ,EAC5CK,EAAe,IAHF,qBAAsBL,GAD5B,sBAMHA,EAAMM,iBAAN,SAAyB,EAAK,KAAMN,EAAMM,iBAAmB,GAN1D,uBAOG,IAAIC,MAAJ,iDAAoDP,EAAMM,iBAA1D,oBAAsFN,EAAMM,iBAAmB,EAAI,MAAQ,OAA3H,MAPH,WASEN,EAAMM,iBAAmB,IAAM,EATjC,uBAUG,IAAIC,MAAJ,0CAA6CP,EAAMM,iBAAnD,cAVH,QAYPD,EAAeL,EAAMM,iBAZd,2BAeFH,GAAkBC,EAfhB,uBAgBG,IAAIG,MAAM,gCAhBb,YAkBHJ,EAlBG,2BAmBgBH,EAAMQ,kBAnBtB,+DAmBQC,EAnBR,WAoBeC,EAAAA,GApBf,uBAqBW,IAAIH,MAAJ,UAAaE,EAAb,gCArBX,QAuBCJ,GAAgBK,EAAAA,GAASD,GAvB1B,qJA0BHL,EA1BG,2BA2BgBJ,EAAMW,oBA3BtB,8DA2BQF,EA3BR,QA4BMG,EAAAA,GAAAA,SAAsBH,GA5B5B,uBA6BW,IAAIF,MAAJ,UAAaE,EAAb,6GA7BX,QA+BCJ,GAAgBI,EA/BjB,yKAmCgBR,QAnChB,IAmCgBA,OAnChB,EAmCgBA,EAAWY,iBAnC3B,eAmCLC,EAnCK,OAmC6CC,QAAQb,GAC1Dc,GAAOC,EAAAA,EAAAA,GAASlB,GApCX,kBAqCJe,EAAYI,oBAAoBC,SAASH,EAAMX,IArC3C,gF","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/burnFuses.js"],"sourcesContent":["import { fuseEnum, unnamedFuses } from '../utils/fuses';\nimport { namehash } from '../utils/normalise';\nexport default async function ({ contracts, signer }, name, props) {\n    const isNumber = 'fuseNumberToBurn' in props;\n    const hasNamedArray = 'namedFusesToBurn' in props;\n    const hasUnnamedArray = 'unnamedFusesToBurn' in props;\n    let encodedFuses = 0;\n    if (isNumber) {\n        if (props.fuseNumberToBurn > 2 ** 32 || props.fuseNumberToBurn < 1) {\n            throw new Error(`Fuse number must be limited to uint32, ${props.fuseNumberToBurn} was too ${props.fuseNumberToBurn < 1 ? 'low' : 'high'}.`);\n        }\n        else if (props.fuseNumberToBurn % 1 !== 0) {\n            throw new Error(`Fuse number must be an integer, ${props.fuseNumberToBurn} was not.`);\n        }\n        encodedFuses = props.fuseNumberToBurn;\n    }\n    else {\n        if (!hasNamedArray && !hasUnnamedArray) {\n            throw new Error('Please provide fuses to burn');\n        }\n        if (hasNamedArray) {\n            for (const fuse of props.namedFusesToBurn) {\n                if (!(fuse in fuseEnum)) {\n                    throw new Error(`${fuse} is not a valid named fuse.`);\n                }\n                encodedFuses |= fuseEnum[fuse];\n            }\n        }\n        if (hasUnnamedArray) {\n            for (const fuse of props.unnamedFusesToBurn) {\n                if (!unnamedFuses.includes(fuse)) {\n                    throw new Error(`${fuse} is not a valid unnamed fuse. If you are trying to burn a named fuse, use the namedFusesToBurn property.`);\n                }\n                encodedFuses |= fuse;\n            }\n        }\n    }\n    const nameWrapper = (await contracts?.getNameWrapper()).connect(signer);\n    const hash = namehash(name);\n    return nameWrapper.populateTransaction.setFuses(hash, encodedFuses);\n}\n"],"names":["name","props","contracts","signer","hasNamedArray","hasUnnamedArray","encodedFuses","fuseNumberToBurn","Error","namedFusesToBurn","fuse","fuseEnum","unnamedFusesToBurn","unnamedFuses","getNameWrapper","nameWrapper","connect","hash","namehash","populateTransaction","setFuses"],"sourceRoot":""}