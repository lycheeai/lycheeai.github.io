{"version":3,"file":"static/js/getSubnames.b9df0ee3.chunk.js","mappings":"kMAGMA,EAAU,yCAAG,+HAASC,EAAT,EAASA,YAAiBC,EAA1B,EAA0BA,KAA1B,EAAgCC,KAAhC,IAAsCC,SAAAA,OAAtC,MAAiD,GAAjD,EAAqDC,EAArD,EAAqDA,eAAgBC,EAArE,EAAqEA,QAArE,IAA8EC,aAAAA,OAA9E,MAA6F,GAA7F,EACTC,EAASP,EAAYO,OACvBC,EAAaR,EAAYS,IAFd,spBAkCXC,EAAY,CACZC,IAAIC,EAAAA,EAAAA,GAASX,GACbY,MAAOV,EACPW,cAAa,UAAER,EAAaA,EAAaS,OAAS,UAArC,aAAE,EAAuCC,UACtDX,QAAAA,EACAD,eAAAA,GAvCW,SAyCUG,EAAOU,QAAQT,EAAYE,GAzCrC,uBAyCPQ,EAzCO,EAyCPA,OACFC,EAAaD,EAAOC,WAAWC,KAAI,SAACC,GACtC,IAAMC,GAAYC,EAAAA,EAAAA,IAAYF,EAAQpB,MACtC,OAAO,kBACAoB,GADP,IAEIpB,KAAMqB,EACNE,eAAeC,EAAAA,EAAAA,IAAeH,IAErC,IAjDc,kBAkDR,CACHI,SAAUP,EACVQ,aAAcT,EAAOU,iBApDV,4CAAH,wDAuDVC,EAAU,yCAAG,6HAAS7B,EAAT,EAASA,YAAiBC,EAA1B,EAA0BA,KAAMC,EAAhC,EAAgCA,KAAhC,IAAsCC,SAAAA,OAAtC,MAAiD,GAAjD,EAAqDC,EAArD,EAAqDA,eAAgBC,EAArE,EAAqEA,QAC9EE,EAASP,EAAYO,OACrBuB,EAFS,kHAcXpB,EAAY,CAAC,EACbF,EAAa,GACG,kBAATN,GACPM,EAAaR,EAAYS,IAAf,kVAaNqB,GAKJpB,EAAY,CACRC,IAAIC,EAAAA,EAAAA,GAASX,GACbI,QAAAA,EACAD,eAAAA,KAIJI,EAAaR,EAAYS,IAAf,+bAkBNqB,GAKJpB,EAAY,CACRC,IAAIC,EAAAA,EAAAA,GAASX,GACbY,MAAOV,EACP4B,MAAO7B,GAAQ,GAAKC,EACpBE,QAAAA,EACAD,eAAAA,IAtEO,SAyEUG,EAAOU,QAAQT,EAAYE,GAzErC,uBAyEPQ,EAzEO,EAyEPA,OACFC,EAAaD,EAAOC,WAAWC,KAAI,SAACC,GACtC,IAAMC,GAAYC,EAAAA,EAAAA,IAAYF,EAAQpB,MACtC,OAAO,kBACAoB,GADP,IAEIpB,KAAMqB,EACNE,eAAeC,EAAAA,EAAAA,IAAeH,IAErC,IAjFc,kBAkFR,CACHI,SAAUP,EACVQ,aAAcT,EAAOU,iBApFV,4CAAH,wDA6FhB,UANoB,SAACI,EAAUC,GAC3B,OAAIA,EAAaC,aACNnC,EAAWiC,EAAUC,GAEzBJ,EAAWG,EAAUC,EAC/B,C,wDCtJM,IACMR,EAAiB,SAACxB,GAAD,OAAUA,EAAKkC,QAAQ,2BAA4B,UAAnD,C,sBCDf,SAASC,EAAuBC,EAASC,GAKtD,OAJKA,IACHA,EAAMD,EAAQE,MAAM,IAGfC,OAAOC,OAAOD,OAAOE,iBAAiBL,EAAS,CACpDC,IAAK,CACHK,MAAOH,OAAOC,OAAOH,MAG3B,C","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/getSubnames.js","../node_modules/@ensdomains/ensjs/dist/esm/utils/format.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import { truncateFormat } from '../utils/format';\nimport { decryptName } from '../utils/labels';\nimport { namehash } from '../utils/normalise';\nconst largeQuery = async ({ gqlInstance }, { name, page, pageSize = 10, orderDirection, orderBy, lastSubnames = [], }) => {\n    const client = gqlInstance.client;\n    let finalQuery = gqlInstance.gql `\n    query getSubnames(\n      $id: ID! \n      $first: Int\n      $lastCreatedAt: BigInt\n      $orderBy: Domain_orderBy \n      $orderDirection: OrderDirection\n    ) {\n      domain(\n        id: $id\n      ) {\n        subdomainCount\n        subdomains(\n          first: $first\n          orderBy: $orderBy\n          orderDirection: $orderDirection\n          where: { createdAt_lt: $lastCreatedAt }\n        ) {\n          id\n          labelName\n          labelhash\n          isMigrated\n          name\n          subdomainCount\n          createdAt\n          owner {\n            id\n          }\n        }\n      }\n    }\n  `;\n    let queryVars = {\n        id: namehash(name),\n        first: pageSize,\n        lastCreatedAt: lastSubnames[lastSubnames.length - 1]?.createdAt,\n        orderBy,\n        orderDirection,\n    };\n    const { domain } = await client.request(finalQuery, queryVars);\n    const subdomains = domain.subdomains.map((subname) => {\n        const decrypted = decryptName(subname.name);\n        return {\n            ...subname,\n            name: decrypted,\n            truncatedName: truncateFormat(decrypted),\n        };\n    });\n    return {\n        subnames: subdomains,\n        subnameCount: domain.subdomainCount,\n    };\n};\nconst smallQuery = async ({ gqlInstance }, { name, page, pageSize = 10, orderDirection, orderBy }) => {\n    const client = gqlInstance.client;\n    const subdomainsGql = `\n  id\n  labelName\n  labelhash\n  isMigrated\n  name\n  subdomainCount\n  createdAt\n  owner {\n    id\n  }\n`;\n    let queryVars = {};\n    let finalQuery = '';\n    if (typeof page !== 'number') {\n        finalQuery = gqlInstance.gql `\n    query getSubnames(\n      $id: ID! \n      $orderBy: Domain_orderBy \n      $orderDirection: OrderDirection\n    ) {\n      domain(\n        id: $id\n      ) {\n        subdomains(\n          orderBy: $orderBy\n          orderDirection: $orderDirection\n        ) {\n          ${subdomainsGql}\n        }\n      }\n    }\n  `;\n        queryVars = {\n            id: namehash(name),\n            orderBy,\n            orderDirection,\n        };\n    }\n    else {\n        finalQuery = gqlInstance.gql `\n    query getSubnames(\n      $id: ID! \n      $first: Int\n      $skip: Int\n      $orderBy: Domain_orderBy \n      $orderDirection: OrderDirection\n    ) {\n      domain(\n        id: $id\n      ) {\n        subdomainCount\n        subdomains(\n          first: $first\n          skip: $skip\n          orderBy: $orderBy\n          orderDirection: $orderDirection\n        ) {\n          ${subdomainsGql}\n        }\n      }\n    }\n  `;\n        queryVars = {\n            id: namehash(name),\n            first: pageSize,\n            skip: (page || 0) * pageSize,\n            orderBy,\n            orderDirection,\n        };\n    }\n    const { domain } = await client.request(finalQuery, queryVars);\n    const subdomains = domain.subdomains.map((subname) => {\n        const decrypted = decryptName(subname.name);\n        return {\n            ...subname,\n            name: decrypted,\n            truncatedName: truncateFormat(decrypted),\n        };\n    });\n    return {\n        subnames: subdomains,\n        subnameCount: domain.subdomainCount,\n    };\n};\nconst getSubnames = (injected, functionArgs) => {\n    if (functionArgs.isLargeQuery) {\n        return largeQuery(injected, functionArgs);\n    }\n    return smallQuery(injected, functionArgs);\n};\nexport default getSubnames;\n","export const formatHashed = (name) => name.replace(/(\\[)(.{64})(\\])/g, '0x$2');\nexport const truncateFormat = (name) => name.replace(/(\\[.{3})(.{58})(.{3}\\])/g, '$1...$3');\nexport const bracketFormat = (name) => name.replace(/(0x)(.{64})(?=\\.)/g, '[$2]');\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["largeQuery","gqlInstance","name","page","pageSize","orderDirection","orderBy","lastSubnames","client","finalQuery","gql","queryVars","id","namehash","first","lastCreatedAt","length","createdAt","request","domain","subdomains","map","subname","decrypted","decryptName","truncatedName","truncateFormat","subnames","subnameCount","subdomainCount","smallQuery","subdomainsGql","skip","injected","functionArgs","isLargeQuery","replace","_taggedTemplateLiteral","strings","raw","slice","Object","freeze","defineProperties","value"],"sourceRoot":""}