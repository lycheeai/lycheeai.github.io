{"version":3,"file":"static/js/getHistory.ae545b67.chunk.js","mappings":"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","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/getHistory.js","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js"],"sourcesContent":["import { formatsByCoinType } from '@ensdomains/address-encoder';\nimport { ethers } from 'ethers';\nimport { decodeContenthash } from '../utils/contentHash';\nconst eventFormat = {\n    Domain: {\n        NewOwner: (args) => ({ owner: args.owner.id }),\n        NewResolver: (args) => ({ resolver: args.resolver.id.split('-')[0] }),\n        Transfer: (args) => ({ owner: args.owner.id }),\n        NewTTL: (args) => ({ ttl: args.ttl }),\n    },\n    Registration: {\n        NameRegistered: (args) => ({\n            registrant: args.registrant.id,\n            expiryDate: args.expiryDate,\n        }),\n        NameRenewed: (args) => ({ expiryDate: args.expiryDate }),\n        NameTransferred: (args) => ({ owner: args.newOwner.id }),\n    },\n    Resolver: {\n        AddrChanged: (args) => ({ addr: args.addr.id }),\n        MulticoinAddrChanged: (args) => {\n            const format = formatsByCoinType[parseInt(args.coinType)];\n            if (!format) {\n                return {\n                    coinType: args.coinType,\n                    rawAddr: args.multiaddr,\n                };\n            }\n            if (ethers.utils.hexStripZeros(args.multiaddr) === '0x') {\n                return {\n                    coinType: args.coinType,\n                    coinName: format.name,\n                    rawAddr: '0x',\n                };\n            }\n            return {\n                coinType: args.coinType,\n                coinName: format.name,\n                addr: format.encoder(Buffer.from(args.multiaddr.slice(2), 'hex')),\n            };\n        },\n        NameChanged: (args) => ({ name: args.name }),\n        AbiChanged: (args) => ({ contentType: args.contentType }),\n        PubkeyChanged: (args) => ({ x: args.x, y: args.y }),\n        TextChanged: (args) => ({ key: args.key, value: args.value }),\n        ContenthashChanged: (args) => ({ hash: decodeContenthash(args.hash) }),\n        InterfaceChanged: (args) => ({\n            interfaceId: args.interfaceId,\n            implementer: args.implementer,\n        }),\n        AuthorisationChanged: (args) => ({\n            owner: args.owner,\n            target: args.target,\n            isAuthorized: args.isAuthorized,\n        }),\n    },\n};\nconst mapEvents = (eventArray, type) => eventArray.map((event) => ({\n    type: event.__typename,\n    blockNumber: event.blockNumber,\n    transactionHash: event.transactionID,\n    id: event.id,\n    data: eventFormat[type][event.__typename](event),\n}));\nexport async function getHistory({ gqlInstance }, name) {\n    const client = gqlInstance.client;\n    const query = gqlInstance.gql `\n      query getHistory($name: String!, $label: String!) {\n        domains(where: { name: $name }) {\n          events {\n            id\n            blockNumber\n            transactionID\n            __typename\n            ...on Transfer {\n              owner {\n                id\n              }\n            }\n            ...on NewOwner {\n              owner {\n                id\n              }\n            }\n            ...on NewResolver {\n              resolver {\n                id\n              }\n            }\n            ...on NewTTL {\n              ttl\n            }\n          }\n          owner {\n            registrations (where: { labelName: $label }) {\n              events {\n                id\n                blockNumber\n                transactionID\n                __typename\n                ...on NameRegistered {\n                  registrant {\n                    id\n                  }\n                  expiryDate\n                }\n                ...on NameRenewed {\n                  expiryDate\n                }\n                ...on NameTransferred {\n                  newOwner {\n                    id\n                  }\n                }\n              }\n            }\n          }\n          resolver {\n            events {\n              id\n              blockNumber\n              transactionID\n              __typename\n              ...on AddrChanged {\n                addr {\n                  id\n                }\n              }\n              ...on MulticoinAddrChanged {\n                coinType\n                multiaddr: addr\n              }\n              ...on NameChanged {\n                name\n              }\n              ...on AbiChanged {\n                contentType\n              }\n              ...on PubkeyChanged {\n                x\n                y\n              }\n              ...on TextChanged {\n                key\n                value\n              }\n              ...on ContenthashChanged {\n                hash\n              }\n              ...on InterfaceChanged {\n                interfaceID\n                implementer\n              }\n              ...on AuthorisationChanged {\n                owner\n                target\n                isAuthorized\n              }\n            }\n          }\n        }\n      }\n      `;\n    const label = name.split('.')[0];\n    const { domains } = await client.request(query, { name, label });\n    if (!domains || domains.length === 0)\n        return;\n    const [{ events: domainEvents, owner: { registrations: [{ events: registrationEvents }], }, resolver: { events: resolverEvents }, },] = domains;\n    const domainHistory = mapEvents(domainEvents, 'Domain');\n    const registrationHistory = mapEvents(registrationEvents, 'Registration');\n    let resolverHistory = mapEvents(\n    // remove duplicate events for ETH cointype\n    resolverEvents.filter((event) => !event.coinType || event.coinType !== '60'), 'Resolver');\n    return {\n        domain: domainHistory,\n        registration: registrationHistory,\n        resolver: resolverHistory,\n    };\n}\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}"],"names":["eventFormat","Domain","NewOwner","args","owner","id","NewResolver","resolver","split","Transfer","NewTTL","ttl","Registration","NameRegistered","registrant","expiryDate","NameRenewed","NameTransferred","newOwner","Resolver","AddrChanged","addr","MulticoinAddrChanged","format","formatsByCoinType","parseInt","coinType","ethers","multiaddr","coinName","name","rawAddr","encoder","Buffer","from","slice","NameChanged","AbiChanged","contentType","PubkeyChanged","x","y","TextChanged","key","value","ContenthashChanged","hash","decodeContenthash","InterfaceChanged","interfaceId","implementer","AuthorisationChanged","target","isAuthorized","mapEvents","eventArray","type","map","event","__typename","blockNumber","transactionHash","transactionID","data","getHistory","gqlInstance","client","query","gql","label","request","domains","length","domainEvents","events","registrations","registrationEvents","resolverEvents","domainHistory","registrationHistory","resolverHistory","filter","domain","registration","_taggedTemplateLiteral","strings","raw","Object","freeze","defineProperties"],"sourceRoot":""}