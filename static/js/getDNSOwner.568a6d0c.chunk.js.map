{"version":3,"file":"static/js/getDNSOwner.568a6d0c.chunk.js","mappings":"gTACO,SAASA,EAAgBC,GAC5B,OAAOC,OAAOC,QAAQF,GACjBG,KAAI,SAACC,GAAD,OAAQA,EAAGD,IAAIE,oBAAoBC,KAAK,IAAxC,IACJA,KAAK,IACb,CACM,IAAMC,EAAM,yCAAG,WAAOC,GAAP,kGACKC,EAAAA,EAAOC,MAAP,+CAAqDX,EAAgB,CACxFY,GAAI,gCACJC,IAAG,UAAEC,EAAAA,OAAcL,UAAhB,aAAE,EAAkBM,SAAS,UAChCC,GAAIC,KAAKC,MAAMH,eAJD,cACZI,EADY,gBAMQA,EAASC,cANjB,cAMZA,EANY,OAQZC,EAAkBC,EAAOC,KAAKH,GARlB,kBASXN,EAAAA,OAAcO,IATH,2CAAH,sDAWNG,EAAQ,yCAAG,WAAOC,EAAOC,GAAd,qFACdC,EAAQ,CACVC,KAAM,QACNC,GAAI,EACJC,MAAOhB,EAAAA,kBACPiB,UAAW,CACP,CACIH,KAAMH,EACNO,MAAO,KACPC,KAAMP,IAGdQ,YAAa,CACT,CACIN,KAAM,MACNI,MAAO,KACPC,KAAM,IACNE,eAAgB,KAChBL,MAAOhB,EAAAA,YAGfsB,QAAS,IArBO,SAuBG5B,EAAOmB,GAvBV,UAwBG,aADjBR,EAvBc,QAwBPkB,MAxBO,sBAyBV,IAAIC,MAAJ,4BAA+BnB,EAASkB,QAzB9B,gCA2BblB,GA3Ba,2CAAH,wDA6BN,gBAAf,+B,8CAAe,WAAgBoB,EAAGC,GAAnB,0GACUhB,EAAS,MAAD,eAAgBgB,IADlC,cACLC,EADK,OAELC,EAFK,OAEKD,QAFL,IAEKA,GAFL,UAEKA,EAAQL,eAFb,iBAEK,EAAkB,UAFvB,iBAEK,EAAsBO,YAF3B,iBAEK,EAA6B,UAFlC,iBAEK,EAAiC5B,kBAFtC,iBAEK,EAA6C6B,MAAM,YAFxD,aAEK,EAA0D,GAF/D,kBAGJF,GAHI,4C","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/getDNSOwner.js"],"sourcesContent":["import * as packet from 'dns-packet';\nexport function encodeURLParams(p) {\n    return Object.entries(p)\n        .map((kv) => kv.map(encodeURIComponent).join('='))\n        .join('&');\n}\nexport const getDNS = async (q) => {\n    const response = await global.fetch(`https://cloudflare-dns.com/dns-query?${encodeURLParams({\n        ct: 'application/dns-udpwireformat',\n        dns: packet.encode(q)?.toString('base64'),\n        ts: Date.now().toString(),\n    })}`);\n    const arrayBuffer = await response.arrayBuffer();\n    // @ts-ignore:next-line\n    const fromArrayBuffer = Buffer.from(arrayBuffer);\n    return packet.decode(fromArrayBuffer);\n};\nexport const dnsQuery = async (qtype, qname) => {\n    const query = {\n        type: 'query',\n        id: 1,\n        flags: packet.RECURSION_DESIRED,\n        questions: [\n            {\n                type: qtype,\n                class: 'IN',\n                name: qname,\n            },\n        ],\n        additionals: [\n            {\n                type: 'OPT',\n                class: 'IN',\n                name: '.',\n                udpPayloadSize: 4096,\n                flags: packet.DNSSEC_OK,\n            },\n        ],\n        answers: [],\n    };\n    const response = await getDNS(query);\n    if (response.rcode !== 'NOERROR') {\n        throw new Error(`DNS query failed: ${response.rcode}`);\n    }\n    return response;\n};\nexport default async function (_, dnsName) {\n    const result = await dnsQuery('TXT', `_ens.${dnsName}`);\n    const address = result?.answers?.[0]?.data?.[0]?.toString()?.split('=')?.[1];\n    return address;\n}\n"],"names":["encodeURLParams","p","Object","entries","map","kv","encodeURIComponent","join","getDNS","q","global","fetch","ct","dns","packet","toString","ts","Date","now","response","arrayBuffer","fromArrayBuffer","Buffer","from","dnsQuery","qtype","qname","query","type","id","flags","questions","class","name","additionals","udpPayloadSize","answers","rcode","Error","_","dnsName","result","address","data","split"],"sourceRoot":""}