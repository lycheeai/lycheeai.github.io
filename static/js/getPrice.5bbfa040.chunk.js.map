{"version":3,"file":"static/js/getPrice.5bbfa040.chunk.js","mappings":"oKACMA,EAAG,yCAAG,aAAwCC,EAAMC,EAAUC,GAAxD,yFAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,iBAApB,gBACiBD,QADjB,IACiBA,OADjB,EACiBA,EAAWE,4BAD5B,UACFC,EADE,OAEFC,EAAW,CACbC,GAAIF,EAAWG,QACfC,KAAMJ,EAAWK,UAAUC,mBAAmB,YAAa,CACvDZ,EACAC,MAGJC,EATI,yCAUGE,EAAiBL,IAAI,CACxBQ,EACA,CACIC,GAAIF,EAAWG,QACfC,KAAMJ,EAAWK,UAAUC,mBAAmB,YAAa,CAACZ,EAAM,QAdtE,gCAkBDO,GAlBC,2CAAH,4DAoBHM,EAAM,yCAAG,aAAwCH,EAAMI,EAAOC,EAASb,GAA9D,uGAASC,EAAT,EAASA,UAAWC,EAApB,EAAoBA,iBAClB,OAATM,EADO,wEAGcP,QAHd,IAGcA,OAHd,EAGcA,EAAWE,4BAHzB,UAGLC,EAHK,iBAOHJ,EAPG,kCAQkBE,EAAiBS,OAAOH,GAR1C,QAQGM,EARH,SASaC,EAAAA,EAAAA,OAA6B,CAAC,WAAYD,EAAO,GAAGE,YATjE,eASIC,EATJ,OAUSF,EAAAA,EAAAA,OAA6B,CAAC,WAAYD,EAAO,GAAGE,YAV7D,eAUFE,EAVE,KAWHC,EAAOF,EAAMG,IAAIF,GAXd,0BAeed,EAAWK,UAAUY,mBAAmB,YAAab,GAfpE,eAeFW,EAfE,KAeID,EAfJ,sCAiBA,CACHC,KAAAA,EACAD,QAAAA,IAnBG,sHAAH,8DA0BZ,WAAiBrB,IAAAA,EAAKc,OAAAA,E","sources":["../node_modules/@ensdomains/ensjs/dist/esm/functions/getPrice.js"],"sourcesContent":["import { utils } from 'ethers';\nconst raw = async ({ contracts, multicallWrapper }, name, duration, legacy) => {\n    const controller = await contracts?.getEthRegistrarController();\n    const baseCall = {\n        to: controller.address,\n        data: controller.interface.encodeFunctionData('rentPrice', [\n            name,\n            duration,\n        ]),\n    };\n    if (legacy) {\n        return multicallWrapper.raw([\n            baseCall,\n            {\n                to: controller.address,\n                data: controller.interface.encodeFunctionData('rentPrice', [name, 0]),\n            },\n        ]);\n    }\n    return baseCall;\n};\nconst decode = async ({ contracts, multicallWrapper }, data, _name, _number, legacy) => {\n    if (data === null)\n        return;\n    const controller = await contracts?.getEthRegistrarController();\n    try {\n        let base;\n        let premium;\n        if (legacy) {\n            const result = await multicallWrapper.decode(data);\n            const [price] = utils.defaultAbiCoder.decode(['uint256'], result[0].returnData);\n            [premium] = utils.defaultAbiCoder.decode(['uint256'], result[1].returnData);\n            base = price.sub(premium);\n        }\n        else {\n            ;\n            [base, premium] = controller.interface.decodeFunctionData('rentPrice', data);\n        }\n        return {\n            base,\n            premium,\n        };\n    }\n    catch {\n        return;\n    }\n};\nexport default { raw, decode };\n"],"names":["raw","name","duration","legacy","contracts","multicallWrapper","getEthRegistrarController","controller","baseCall","to","address","data","interface","encodeFunctionData","decode","_name","_number","result","utils","returnData","price","premium","base","sub","decodeFunctionData"],"sourceRoot":""}